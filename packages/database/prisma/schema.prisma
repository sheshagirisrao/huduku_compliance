datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

generator zod {
    provider         = "zod-prisma-types"
    output           = "./zod"
    createInputTypes = true
    addIncludeType   = false
    addSelectType    = false
}

generator json {
    provider = "prisma-json-types-generator"
}

model User {
    id                 String       @id @default(cuid())
    name               String
    email              String
    emailVerified      Boolean      @map("email_verified")
    image              String?
    createdAt          DateTime     @map("created_at")
    updatedAt          DateTime     @map("updated_at")
    username           String?
    role               String?
    banned             Boolean?
    banReason          String?      @map("ban_reason")
    banExpires         DateTime?    @map("ban_expires")
    onboardingComplete Boolean      @default(false) @map("onboarding_complete")
    paymentsCustomerId String?      @map("payments_customer_id")
    locale             String?
    twoFactorEnabled   Boolean?     @map("two_factor_enabled")
    sessions           Session[]
    accounts           Account[]
    passkeys           Passkey[]
    invitations        Invitation[]
    purchases          Purchase[]
    members            Member[]
    twofactors         TwoFactor[]
    aiChats            AiChat[]

    @@unique([email])
    @@unique([username])
    @@map("user")
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime @map("expires_at")
    ipAddress String?  @map("ip_address")
    userAgent String?  @map("user_agent")
    userId    String   @map("user_id")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy String? @map("impersonated_by")

    activeOrganizationId String? @map("active_organization_id")

    token     String
    createdAt DateTime @map("created_at")
    updatedAt DateTime @map("updated_at")

    @@unique([token])
    @@map("session")
}

model Account {
    id           String    @id @default(cuid())
    accountId    String    @map("account_id")
    providerId   String    @map("provider_id")
    userId       String    @map("user_id")
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken  String?   @map("access_token") @db.Text
    refreshToken String?   @map("refresh_token") @db.Text
    idToken      String?   @map("id_token") @db.Text
    expiresAt    DateTime? @map("expires_at")
    password     String?

    accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
    refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
    scope                 String?
    createdAt             DateTime  @map("created_at")
    updatedAt             DateTime  @map("updated_at")

    @@map("account")
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String   @db.Text
    expiresAt  DateTime @map("expires_at")

    createdAt DateTime? @map("created_at")
    updatedAt DateTime? @map("updated_at")

    @@map("verification")
}

model Passkey {
    id           String    @id @default(cuid())
    name         String?
    publicKey    String    @map("public_key")
    userId       String    @map("user_id")
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    credentialID String    @map("credential_id")
    counter      Int
    deviceType   String    @map("device_type")
    backedUp     Boolean   @map("backed_up")
    transports   String?
    createdAt    DateTime? @map("created_at")

    @@map("passkey")
}

model TwoFactor {
    id          String @id @default(cuid())
    secret      String
    backupCodes String @map("backup_codes")
    userId      String @map("user_id")
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("two_factor")
}

model Organization {
    id                 String       @id @default(cuid())
    name               String
    slug               String?
    logo               String?
    createdAt          DateTime     @map("created_at")
    metadata           String?
    paymentsCustomerId String?      @map("payments_customer_id")
    members            Member[]
    invitations        Invitation[]
    purchases          Purchase[]
    aiChats            AiChat[]

    @@unique([slug])
    @@map("organization")
}

model Member {
    id             String       @id @default(cuid())
    organizationId String       @map("organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String       @map("user_id")
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String
    createdAt      DateTime     @map("created_at")

    @@unique([organizationId, userId])
    @@map("member")
}

model Invitation {
    id             String       @id @default(cuid())
    organizationId String       @map("organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String?
    status         String
    expiresAt      DateTime     @map("expires_at")
    inviterId      String       @map("inviter_id")
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    @@map("invitation")
}

enum PurchaseType {
    SUBSCRIPTION
    ONE_TIME
}

model Purchase {
    id             String        @id @default(cuid())
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String?       @map("organization_id")
    user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String?       @map("user_id")
    type           PurchaseType
    customerId     String        @map("customer_id")
    subscriptionId String?       @unique @map("subscription_id")
    productId      String        @map("product_id")
    status         String?
    createdAt      DateTime      @default(now()) @map("created_at")
    updatedAt      DateTime      @updatedAt @map("updated_at")

    @@index([subscriptionId])
    @@map("purchase")
}

model AiChat {
    id             String        @id @default(cuid())
    organizationId String?       @map("organization_id")
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String?       @map("user_id")
    user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    title          String?
    /// [Array<{role: "user" | "assistant"; content: string;}>]
    messages       Json          @default("[]") /// @zod.custom.use(z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })))
    createdAt      DateTime      @default(now()) @map("created_at")
    updatedAt      DateTime      @updatedAt @map("updated_at")

    @@map("ai_chat")
}
